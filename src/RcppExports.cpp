// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// approxLogML
double approxLogML(double muqBetaZero, double sigsqqBeta0, arma::vec muqgammaBeta, double AqrhoBeta, double BqrhoBeta, double muqrecipSigsqBeta, arma::vec muqbBeta, arma::vec muqBetaTilde, arma::mat SigmaqBetaTilde, double muqrecipaBeta, double lambdaqSigsqBeta, double sBetaHYP, double lambdaqaBeta, arma::mat muqgammaU, arma::vec AqrhoU, arma::vec BqrhoU, arma::vec muqrecipSigsqU, arma::vec muqbU, arma::mat muqUtilde, arma::mat sigsqqUtilde, arma::vec muqrecipaU, arma::vec lambdaqSigsqU, double sUHYP, arma::vec lambdaqaU, double muqrecipaEps, double muqrecipSigsqEps, double lambdaqaEps, double lambdaqSigsqEps, double sEpsHYP, int n, arma::uvec ncZvec, int familyNum, arma::vec ySign, arma::vec omega20);
RcppExport SEXP _gamselBayes_approxLogML(SEXP muqBetaZeroSEXP, SEXP sigsqqBeta0SEXP, SEXP muqgammaBetaSEXP, SEXP AqrhoBetaSEXP, SEXP BqrhoBetaSEXP, SEXP muqrecipSigsqBetaSEXP, SEXP muqbBetaSEXP, SEXP muqBetaTildeSEXP, SEXP SigmaqBetaTildeSEXP, SEXP muqrecipaBetaSEXP, SEXP lambdaqSigsqBetaSEXP, SEXP sBetaHYPSEXP, SEXP lambdaqaBetaSEXP, SEXP muqgammaUSEXP, SEXP AqrhoUSEXP, SEXP BqrhoUSEXP, SEXP muqrecipSigsqUSEXP, SEXP muqbUSEXP, SEXP muqUtildeSEXP, SEXP sigsqqUtildeSEXP, SEXP muqrecipaUSEXP, SEXP lambdaqSigsqUSEXP, SEXP sUHYPSEXP, SEXP lambdaqaUSEXP, SEXP muqrecipaEpsSEXP, SEXP muqrecipSigsqEpsSEXP, SEXP lambdaqaEpsSEXP, SEXP lambdaqSigsqEpsSEXP, SEXP sEpsHYPSEXP, SEXP nSEXP, SEXP ncZvecSEXP, SEXP familyNumSEXP, SEXP ySignSEXP, SEXP omega20SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type muqBetaZero(muqBetaZeroSEXP);
    Rcpp::traits::input_parameter< double >::type sigsqqBeta0(sigsqqBeta0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type muqgammaBeta(muqgammaBetaSEXP);
    Rcpp::traits::input_parameter< double >::type AqrhoBeta(AqrhoBetaSEXP);
    Rcpp::traits::input_parameter< double >::type BqrhoBeta(BqrhoBetaSEXP);
    Rcpp::traits::input_parameter< double >::type muqrecipSigsqBeta(muqrecipSigsqBetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type muqbBeta(muqbBetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type muqBetaTilde(muqBetaTildeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type SigmaqBetaTilde(SigmaqBetaTildeSEXP);
    Rcpp::traits::input_parameter< double >::type muqrecipaBeta(muqrecipaBetaSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaqSigsqBeta(lambdaqSigsqBetaSEXP);
    Rcpp::traits::input_parameter< double >::type sBetaHYP(sBetaHYPSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaqaBeta(lambdaqaBetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type muqgammaU(muqgammaUSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type AqrhoU(AqrhoUSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type BqrhoU(BqrhoUSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type muqrecipSigsqU(muqrecipSigsqUSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type muqbU(muqbUSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type muqUtilde(muqUtildeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigsqqUtilde(sigsqqUtildeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type muqrecipaU(muqrecipaUSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambdaqSigsqU(lambdaqSigsqUSEXP);
    Rcpp::traits::input_parameter< double >::type sUHYP(sUHYPSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambdaqaU(lambdaqaUSEXP);
    Rcpp::traits::input_parameter< double >::type muqrecipaEps(muqrecipaEpsSEXP);
    Rcpp::traits::input_parameter< double >::type muqrecipSigsqEps(muqrecipSigsqEpsSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaqaEps(lambdaqaEpsSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaqSigsqEps(lambdaqSigsqEpsSEXP);
    Rcpp::traits::input_parameter< double >::type sEpsHYP(sEpsHYPSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncZvec(ncZvecSEXP);
    Rcpp::traits::input_parameter< int >::type familyNum(familyNumSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ySign(ySignSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type omega20(omega20SEXP);
    rcpp_result_gen = Rcpp::wrap(approxLogML(muqBetaZero, sigsqqBeta0, muqgammaBeta, AqrhoBeta, BqrhoBeta, muqrecipSigsqBeta, muqbBeta, muqBetaTilde, SigmaqBetaTilde, muqrecipaBeta, lambdaqSigsqBeta, sBetaHYP, lambdaqaBeta, muqgammaU, AqrhoU, BqrhoU, muqrecipSigsqU, muqbU, muqUtilde, sigsqqUtilde, muqrecipaU, lambdaqSigsqU, sUHYP, lambdaqaU, muqrecipaEps, muqrecipSigsqEps, lambdaqaEps, lambdaqSigsqEps, sEpsHYP, n, ncZvec, familyNum, ySign, omega20));
    return rcpp_result_gen;
END_RCPP
}
// drawInvGaussVec
arma::vec drawInvGaussVec(arma::vec muVec);
RcppExport SEXP _gamselBayes_drawInvGaussVec(SEXP muVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type muVec(muVecSEXP);
    rcpp_result_gen = Rcpp::wrap(drawInvGaussVec(muVec));
    return rcpp_result_gen;
END_RCPP
}
// elemProdChk
arma::vec elemProdChk(arma::vec a, arma::vec b);
RcppExport SEXP _gamselBayes_elemProdChk(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(elemProdChk(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gamselBayesMCMCinner
List gamselBayesMCMCinner(arma::vec y, arma::mat X, arma::mat Z, int familyNum, arma::uvec ncZvec, int ncZmax, int dGeneral, arma::uvec ZsttInds, arma::uvec ZendInds, arma::vec XTy, arma::mat XTX, arma::vec ZTy, arma::mat ZTX, arma::mat ZTZ, double sigmaBeta0HYP, double sepsHYP, double sbetaHYP, double suHYP, double AbetaHYP, double BbetaHYP, double AuHYP, double BuHYP, int numMCMC, int msgCode);
RcppExport SEXP _gamselBayes_gamselBayesMCMCinner(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP familyNumSEXP, SEXP ncZvecSEXP, SEXP ncZmaxSEXP, SEXP dGeneralSEXP, SEXP ZsttIndsSEXP, SEXP ZendIndsSEXP, SEXP XTySEXP, SEXP XTXSEXP, SEXP ZTySEXP, SEXP ZTXSEXP, SEXP ZTZSEXP, SEXP sigmaBeta0HYPSEXP, SEXP sepsHYPSEXP, SEXP sbetaHYPSEXP, SEXP suHYPSEXP, SEXP AbetaHYPSEXP, SEXP BbetaHYPSEXP, SEXP AuHYPSEXP, SEXP BuHYPSEXP, SEXP numMCMCSEXP, SEXP msgCodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type familyNum(familyNumSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncZvec(ncZvecSEXP);
    Rcpp::traits::input_parameter< int >::type ncZmax(ncZmaxSEXP);
    Rcpp::traits::input_parameter< int >::type dGeneral(dGeneralSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ZsttInds(ZsttIndsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ZendInds(ZendIndsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type XTy(XTySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XTX(XTXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ZTy(ZTySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ZTX(ZTXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ZTZ(ZTZSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaBeta0HYP(sigmaBeta0HYPSEXP);
    Rcpp::traits::input_parameter< double >::type sepsHYP(sepsHYPSEXP);
    Rcpp::traits::input_parameter< double >::type sbetaHYP(sbetaHYPSEXP);
    Rcpp::traits::input_parameter< double >::type suHYP(suHYPSEXP);
    Rcpp::traits::input_parameter< double >::type AbetaHYP(AbetaHYPSEXP);
    Rcpp::traits::input_parameter< double >::type BbetaHYP(BbetaHYPSEXP);
    Rcpp::traits::input_parameter< double >::type AuHYP(AuHYPSEXP);
    Rcpp::traits::input_parameter< double >::type BuHYP(BuHYPSEXP);
    Rcpp::traits::input_parameter< int >::type numMCMC(numMCMCSEXP);
    Rcpp::traits::input_parameter< int >::type msgCode(msgCodeSEXP);
    rcpp_result_gen = Rcpp::wrap(gamselBayesMCMCinner(y, X, Z, familyNum, ncZvec, ncZmax, dGeneral, ZsttInds, ZendInds, XTy, XTX, ZTy, ZTX, ZTZ, sigmaBeta0HYP, sepsHYP, sbetaHYP, suHYP, AbetaHYP, BbetaHYP, AuHYP, BuHYP, numMCMC, msgCode));
    return rcpp_result_gen;
END_RCPP
}
// gamselBayesMFVBinner
List gamselBayesMFVBinner(arma::vec y, arma::mat X, arma::mat Z, int familyNum, arma::uvec ncZvec, int ncZmax, int dGeneral, arma::uvec ZsttInds, arma::uvec ZendInds, arma::vec XTy, arma::mat XTX, arma::vec ZTy, arma::mat ZTX, arma::mat ZTZ, double sigmaBeta0HYP, double sEpsHYP, double sBetaHYP, double sUHYP, double AbetaHYP, double BbetaHYP, double AuHYP, double BuHYP, int maxIter, double toler, int msgCode);
RcppExport SEXP _gamselBayes_gamselBayesMFVBinner(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP familyNumSEXP, SEXP ncZvecSEXP, SEXP ncZmaxSEXP, SEXP dGeneralSEXP, SEXP ZsttIndsSEXP, SEXP ZendIndsSEXP, SEXP XTySEXP, SEXP XTXSEXP, SEXP ZTySEXP, SEXP ZTXSEXP, SEXP ZTZSEXP, SEXP sigmaBeta0HYPSEXP, SEXP sEpsHYPSEXP, SEXP sBetaHYPSEXP, SEXP sUHYPSEXP, SEXP AbetaHYPSEXP, SEXP BbetaHYPSEXP, SEXP AuHYPSEXP, SEXP BuHYPSEXP, SEXP maxIterSEXP, SEXP tolerSEXP, SEXP msgCodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type familyNum(familyNumSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncZvec(ncZvecSEXP);
    Rcpp::traits::input_parameter< int >::type ncZmax(ncZmaxSEXP);
    Rcpp::traits::input_parameter< int >::type dGeneral(dGeneralSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ZsttInds(ZsttIndsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ZendInds(ZendIndsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type XTy(XTySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XTX(XTXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ZTy(ZTySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ZTX(ZTXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ZTZ(ZTZSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaBeta0HYP(sigmaBeta0HYPSEXP);
    Rcpp::traits::input_parameter< double >::type sEpsHYP(sEpsHYPSEXP);
    Rcpp::traits::input_parameter< double >::type sBetaHYP(sBetaHYPSEXP);
    Rcpp::traits::input_parameter< double >::type sUHYP(sUHYPSEXP);
    Rcpp::traits::input_parameter< double >::type AbetaHYP(AbetaHYPSEXP);
    Rcpp::traits::input_parameter< double >::type BbetaHYP(BbetaHYPSEXP);
    Rcpp::traits::input_parameter< double >::type AuHYP(AuHYPSEXP);
    Rcpp::traits::input_parameter< double >::type BuHYP(BuHYPSEXP);
    Rcpp::traits::input_parameter< int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type toler(tolerSEXP);
    Rcpp::traits::input_parameter< int >::type msgCode(msgCodeSEXP);
    rcpp_result_gen = Rcpp::wrap(gamselBayesMFVBinner(y, X, Z, familyNum, ncZvec, ncZmax, dGeneral, ZsttInds, ZendInds, XTy, XTX, ZTy, ZTX, ZTZ, sigmaBeta0HYP, sEpsHYP, sBetaHYP, sUHYP, AbetaHYP, BbetaHYP, AuHYP, BuHYP, maxIter, toler, msgCode));
    return rcpp_result_gen;
END_RCPP
}
// logPhi
double logPhi(double x);
RcppExport SEXP _gamselBayes_logPhi(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logPhi(x));
    return rcpp_result_gen;
END_RCPP
}
// omitMatCol
arma::mat omitMatCol(arma::mat A, int j);
RcppExport SEXP _gamselBayes_omitMatCol(SEXP ASEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(omitMatCol(A, j));
    return rcpp_result_gen;
END_RCPP
}
// omitVecEnt
arma::vec omitVecEnt(arma::vec a, int j);
RcppExport SEXP _gamselBayes_omitVecEnt(SEXP aSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(omitVecEnt(a, j));
    return rcpp_result_gen;
END_RCPP
}
// printPercMsgs
int printPercMsgs(int msgCode, int loopSize, int iLoop, int percCnt);
RcppExport SEXP _gamselBayes_printPercMsgs(SEXP msgCodeSEXP, SEXP loopSizeSEXP, SEXP iLoopSEXP, SEXP percCntSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type msgCode(msgCodeSEXP);
    Rcpp::traits::input_parameter< int >::type loopSize(loopSizeSEXP);
    Rcpp::traits::input_parameter< int >::type iLoop(iLoopSEXP);
    Rcpp::traits::input_parameter< int >::type percCnt(percCntSEXP);
    rcpp_result_gen = Rcpp::wrap(printPercMsgs(msgCode, loopSize, iLoop, percCnt));
    return rcpp_result_gen;
END_RCPP
}
// rTruncNormPos
double rTruncNormPos(double mu);
RcppExport SEXP _gamselBayes_rTruncNormPos(SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(rTruncNormPos(mu));
    return rcpp_result_gen;
END_RCPP
}
// zetad
double zetad(double x);
RcppExport SEXP _gamselBayes_zetad(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(zetad(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gamselBayes_approxLogML", (DL_FUNC) &_gamselBayes_approxLogML, 34},
    {"_gamselBayes_drawInvGaussVec", (DL_FUNC) &_gamselBayes_drawInvGaussVec, 1},
    {"_gamselBayes_elemProdChk", (DL_FUNC) &_gamselBayes_elemProdChk, 2},
    {"_gamselBayes_gamselBayesMCMCinner", (DL_FUNC) &_gamselBayes_gamselBayesMCMCinner, 24},
    {"_gamselBayes_gamselBayesMFVBinner", (DL_FUNC) &_gamselBayes_gamselBayesMFVBinner, 25},
    {"_gamselBayes_logPhi", (DL_FUNC) &_gamselBayes_logPhi, 1},
    {"_gamselBayes_omitMatCol", (DL_FUNC) &_gamselBayes_omitMatCol, 2},
    {"_gamselBayes_omitVecEnt", (DL_FUNC) &_gamselBayes_omitVecEnt, 2},
    {"_gamselBayes_printPercMsgs", (DL_FUNC) &_gamselBayes_printPercMsgs, 4},
    {"_gamselBayes_rTruncNormPos", (DL_FUNC) &_gamselBayes_rTruncNormPos, 1},
    {"_gamselBayes_zetad", (DL_FUNC) &_gamselBayes_zetad, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_gamselBayes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
